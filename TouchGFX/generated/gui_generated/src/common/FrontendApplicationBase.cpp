/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#ifdef SIMULATOR
#include <platform/driver/lcd/LCD16bpp.hpp>
#endif
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>
#include <gui/menuscreen_screen/menuScreenView.hpp>
#include <gui/menuscreen_screen/menuScreenPresenter.hpp>
#include <gui/timescreen_screen/timeScreenView.hpp>
#include <gui/timescreen_screen/timeScreenPresenter.hpp>
#include <gui/datescreen_screen/dateScreenView.hpp>
#include <gui/datescreen_screen/dateScreenPresenter.hpp>
#include <gui/infoscreen_screen/infoScreenView.hpp>
#include <gui/infoscreen_screen/infoScreenPresenter.hpp>
#include <gui/passwordscreen_screen/passwordScreenView.hpp>
#include <gui/passwordscreen_screen/passwordScreenPresenter.hpp>
#include <gui/burnscreen_screen/burnScreenView.hpp>
#include <gui/burnscreen_screen/burnScreenPresenter.hpp>
#include <gui/manualscreen_screen/manualScreenView.hpp>
#include <gui/manualscreen_screen/manualScreenPresenter.hpp>
#include <gui/servicescreen_screen/serviceScreenView.hpp>
#include <gui/servicescreen_screen/serviceScreenPresenter.hpp>
#include <gui/langscreen_screen/langScreenView.hpp>
#include <gui/langscreen_screen/langScreenPresenter.hpp>
#include <gui/distribscreen_screen/distribScreenView.hpp>
#include <gui/distribscreen_screen/distribScreenPresenter.hpp>
#include <gui/modeioscreen_screen/modeIOScreenView.hpp>
#include <gui/modeioscreen_screen/modeIOScreenPresenter.hpp>
#include <gui/burnprocscreen_screen/burnProcScreenView.hpp>
#include <gui/burnprocscreen_screen/burnProcScreenPresenter.hpp>
#include <gui/exchanscreen_screen/exchanScreenView.hpp>
#include <gui/exchanscreen_screen/exchanScreenPresenter.hpp>
#include <gui/systemscreen_screen/systemScreenView.hpp>
#include <gui/systemscreen_screen/systemScreenPresenter.hpp>
#include <gui/pflapscreen_screen/pflapScreenView.hpp>
#include <gui/pflapscreen_screen/pflapScreenPresenter.hpp>
#include <gui/sflapscreen_screen/sflapScreenView.hpp>
#include <gui/sflapscreen_screen/sflapScreenPresenter.hpp>
#include <gui/boilerscreen_screen/boilerScreenView.hpp>
#include <gui/boilerscreen_screen/boilerScreenPresenter.hpp>
#include <gui/accumscreen_screen/accumScreenView.hpp>
#include <gui/accumscreen_screen/accumScreenPresenter.hpp>
#include <gui/modescreen_screen/modeScreenView.hpp>
#include <gui/modescreen_screen/modeScreenPresenter.hpp>
#include <gui/exservicescreen_screen/exserviceScreenView.hpp>
#include <gui/exservicescreen_screen/exserviceScreenPresenter.hpp>
#include <gui/energyscreen_screen/energyScreenView.hpp>
#include <gui/energyscreen_screen/energyScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
#ifdef SIMULATOR
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
#endif
}

/*
 * Screen Transition Declarations
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// menuScreen

void FrontendApplicationBase::gotomenuScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomenuScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotomenuScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<menuScreenView, menuScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// timeScreen

void FrontendApplicationBase::gototimeScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gototimeScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gototimeScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<timeScreenView, timeScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// dateScreen

void FrontendApplicationBase::gotodateScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotodateScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotodateScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<dateScreenView, dateScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// infoScreen

void FrontendApplicationBase::gotoinfoScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoinfoScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoinfoScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<infoScreenView, infoScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// passwordScreen

void FrontendApplicationBase::gotopasswordScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotopasswordScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotopasswordScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<passwordScreenView, passwordScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// burnScreen

void FrontendApplicationBase::gotoburnScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoburnScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoburnScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<burnScreenView, burnScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// manualScreen

void FrontendApplicationBase::gotomanualScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomanualScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotomanualScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<manualScreenView, manualScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// serviceScreen

void FrontendApplicationBase::gotoserviceScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoserviceScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoserviceScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<serviceScreenView, serviceScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// langScreen

void FrontendApplicationBase::gotolangScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotolangScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotolangScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<langScreenView, langScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// distribScreen

void FrontendApplicationBase::gotodistribScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotodistribScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotodistribScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<distribScreenView, distribScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// modeIOScreen

void FrontendApplicationBase::gotomodeIOScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomodeIOScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotomodeIOScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<modeIOScreenView, modeIOScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// burnProcScreen

void FrontendApplicationBase::gotoburnProcScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoburnProcScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoburnProcScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<burnProcScreenView, burnProcScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// exchanScreen

void FrontendApplicationBase::gotoexchanScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoexchanScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoexchanScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<exchanScreenView, exchanScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// systemScreen

void FrontendApplicationBase::gotosystemScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotosystemScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotosystemScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<systemScreenView, systemScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// pflapScreen

void FrontendApplicationBase::gotopflapScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotopflapScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotopflapScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<pflapScreenView, pflapScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// sflapScreen

void FrontendApplicationBase::gotosflapScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotosflapScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotosflapScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<sflapScreenView, sflapScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// boilerScreen

void FrontendApplicationBase::gotoboilerScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoboilerScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoboilerScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<boilerScreenView, boilerScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// accumScreen

void FrontendApplicationBase::gotoaccumScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoaccumScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoaccumScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<accumScreenView, accumScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// modeScreen

void FrontendApplicationBase::gotomodeScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomodeScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotomodeScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<modeScreenView, modeScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// exserviceScreen

void FrontendApplicationBase::gotoexserviceScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoexserviceScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoexserviceScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<exserviceScreenView, exserviceScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// energyScreen

void FrontendApplicationBase::gotoenergyScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoenergyScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoenergyScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<energyScreenView, energyScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
