/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef FRONTENDHEAPBASE_HPP
#define FRONTENDHEAPBASE_HPP

#include <common/Meta.hpp>
#include <common/Partition.hpp>
#include <mvp/MVPHeap.hpp>

#include <touchgfx/transitions/NoTransition.hpp>
#include <gui/common/FrontendApplication.hpp>
#include <gui/model/Model.hpp>

#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>
#include <gui/menuscreen_screen/menuScreenView.hpp>
#include <gui/menuscreen_screen/menuScreenPresenter.hpp>
#include <gui/timescreen_screen/timeScreenView.hpp>
#include <gui/timescreen_screen/timeScreenPresenter.hpp>
#include <gui/datescreen_screen/dateScreenView.hpp>
#include <gui/datescreen_screen/dateScreenPresenter.hpp>
#include <gui/infoscreen_screen/infoScreenView.hpp>
#include <gui/infoscreen_screen/infoScreenPresenter.hpp>
#include <gui/passwordscreen_screen/passwordScreenView.hpp>
#include <gui/passwordscreen_screen/passwordScreenPresenter.hpp>
#include <gui/burnscreen_screen/burnScreenView.hpp>
#include <gui/burnscreen_screen/burnScreenPresenter.hpp>
#include <gui/manualscreen_screen/manualScreenView.hpp>
#include <gui/manualscreen_screen/manualScreenPresenter.hpp>
#include <gui/servicescreen_screen/serviceScreenView.hpp>
#include <gui/servicescreen_screen/serviceScreenPresenter.hpp>
#include <gui/langscreen_screen/langScreenView.hpp>
#include <gui/langscreen_screen/langScreenPresenter.hpp>
#include <gui/distribscreen_screen/distribScreenView.hpp>
#include <gui/distribscreen_screen/distribScreenPresenter.hpp>
#include <gui/modeioscreen_screen/modeIOScreenView.hpp>
#include <gui/modeioscreen_screen/modeIOScreenPresenter.hpp>
#include <gui/burnprocscreen_screen/burnProcScreenView.hpp>
#include <gui/burnprocscreen_screen/burnProcScreenPresenter.hpp>
#include <gui/exchanscreen_screen/exchanScreenView.hpp>
#include <gui/exchanscreen_screen/exchanScreenPresenter.hpp>
#include <gui/systemscreen_screen/systemScreenView.hpp>
#include <gui/systemscreen_screen/systemScreenPresenter.hpp>
#include <gui/pflapscreen_screen/pflapScreenView.hpp>
#include <gui/pflapscreen_screen/pflapScreenPresenter.hpp>
#include <gui/sflapscreen_screen/sflapScreenView.hpp>
#include <gui/sflapscreen_screen/sflapScreenPresenter.hpp>
#include <gui/boilerscreen_screen/boilerScreenView.hpp>
#include <gui/boilerscreen_screen/boilerScreenPresenter.hpp>
#include <gui/accumscreen_screen/accumScreenView.hpp>
#include <gui/accumscreen_screen/accumScreenPresenter.hpp>
#include <gui/modescreen_screen/modeScreenView.hpp>
#include <gui/modescreen_screen/modeScreenPresenter.hpp>
#include <gui/exservicescreen_screen/exserviceScreenView.hpp>
#include <gui/exservicescreen_screen/exserviceScreenPresenter.hpp>
#include <gui/energyscreen_screen/energyScreenView.hpp>
#include <gui/energyscreen_screen/energyScreenPresenter.hpp>


/**
 * This class provides the memory that shall be used for memory allocations
 * in the frontend. A single instance of the FrontendHeap is allocated once (in heap
 * memory), and all other frontend objects such as views, presenters and data model are
 * allocated within the scope of this FrontendHeap. As such, the RAM usage of the entire
 * user interface is sizeof(FrontendHeap).
 *
 * @note The FrontendHeap reserves memory for the most memory-consuming presenter and
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
{
public:
    /**
     * A list of all view types. Must end with meta::Nil.
     * @note All view types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< mainScreenView,
            touchgfx::meta::TypeList< menuScreenView,
            touchgfx::meta::TypeList< timeScreenView,
            touchgfx::meta::TypeList< dateScreenView,
            touchgfx::meta::TypeList< infoScreenView,
            touchgfx::meta::TypeList< passwordScreenView,
            touchgfx::meta::TypeList< burnScreenView,
            touchgfx::meta::TypeList< manualScreenView,
            touchgfx::meta::TypeList< serviceScreenView,
            touchgfx::meta::TypeList< langScreenView,
            touchgfx::meta::TypeList< distribScreenView,
            touchgfx::meta::TypeList< modeIOScreenView,
            touchgfx::meta::TypeList< burnProcScreenView,
            touchgfx::meta::TypeList< exchanScreenView,
            touchgfx::meta::TypeList< systemScreenView,
            touchgfx::meta::TypeList< pflapScreenView,
            touchgfx::meta::TypeList< sflapScreenView,
            touchgfx::meta::TypeList< boilerScreenView,
            touchgfx::meta::TypeList< accumScreenView,
            touchgfx::meta::TypeList< modeScreenView,
            touchgfx::meta::TypeList< exserviceScreenView,
            touchgfx::meta::TypeList< energyScreenView,
            touchgfx::meta::Nil > > > > > > > > > > > > > > > > > > > > >
            > GeneratedViewTypes;

    /**
     * Determine (compile time) the View type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedViewTypes >::type MaxGeneratedViewType;

    /**
     * A list of all presenter types. Must end with meta::Nil.
     * @note All presenter types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< mainScreenPresenter,
            touchgfx::meta::TypeList< menuScreenPresenter,
            touchgfx::meta::TypeList< timeScreenPresenter,
            touchgfx::meta::TypeList< dateScreenPresenter,
            touchgfx::meta::TypeList< infoScreenPresenter,
            touchgfx::meta::TypeList< passwordScreenPresenter,
            touchgfx::meta::TypeList< burnScreenPresenter,
            touchgfx::meta::TypeList< manualScreenPresenter,
            touchgfx::meta::TypeList< serviceScreenPresenter,
            touchgfx::meta::TypeList< langScreenPresenter,
            touchgfx::meta::TypeList< distribScreenPresenter,
            touchgfx::meta::TypeList< modeIOScreenPresenter,
            touchgfx::meta::TypeList< burnProcScreenPresenter,
            touchgfx::meta::TypeList< exchanScreenPresenter,
            touchgfx::meta::TypeList< systemScreenPresenter,
            touchgfx::meta::TypeList< pflapScreenPresenter,
            touchgfx::meta::TypeList< sflapScreenPresenter,
            touchgfx::meta::TypeList< boilerScreenPresenter,
            touchgfx::meta::TypeList< accumScreenPresenter,
            touchgfx::meta::TypeList< modeScreenPresenter,
            touchgfx::meta::TypeList< exserviceScreenPresenter,
            touchgfx::meta::TypeList< energyScreenPresenter,
            touchgfx::meta::Nil > > > > > > > > > > > > > > > > > > > > >
            > GeneratedPresenterTypes;

    /**
     * Determine (compile time) the Presenter type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedPresenterTypes >::type MaxGeneratedPresenterType;

    /**
     * A list of all transition types. Must end with meta::Nil.
     * @note All transition types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< touchgfx::NoTransition,
            touchgfx::meta::Nil
            > GeneratedTransitionTypes;

    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotomainScreenScreenNoTransition();
    }
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
    {

    }

};

#endif // FRONTENDHEAPBASE_HPP
