/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINSCREENVIEWBASE_HPP
#define MAINSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <gui/containers/PumpCont.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <gui/containers/SensorCont.hpp>
#include <gui/containers/ValveMCont.hpp>
#include <gui/containers/SensorExCont.hpp>

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void doorBtn_clicked()
    {
        // Override and implement this function in mainScreen
    }
    virtual void soundBtn_clicked()
    {
        // Override and implement this function in mainScreen
    }
    virtual void profileSldChangeVal(int value)
    {
        // Override and implement this function in mainScreen
    }
    virtual void profileSldChangeConf(int value)
    {
        // Override and implement this function in mainScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image i_bg;
    touchgfx::Image i_sch;
    PumpCont p_pump3;
    PumpCont p_pump2;
    PumpCont p_pump1;
    touchgfx::Line line1;
    touchgfx::PainterRGB565 line1Painter;
    touchgfx::Button menuBtn;
    touchgfx::Image p_clock;
    touchgfx::TextAreaWithOneWildcard t_timeClock;
    touchgfx::TextAreaWithOneWildcard t_dateClock;
    touchgfx::Image p_info;
    touchgfx::Image i_statusBar;
    touchgfx::TextAreaWithOneWildcard t_debug;
    touchgfx::Image i_sflap;
    touchgfx::Image i_pflap;
    touchgfx::TextAreaWithOneWildcard t_pflap;
    touchgfx::TextAreaWithOneWildcard t_sflap;
    touchgfx::Slider profileSld;
    touchgfx::TextAreaWithOneWildcard t_accLevel;
    touchgfx::TextArea t_info;
    touchgfx::TextAreaWithOneWildcard t_accEng;
    touchgfx::ToggleButton soundBtn;
    touchgfx::ButtonWithLabel doorBtn;
    touchgfx::TextAreaWithOneWildcard t_rTF;
    SensorCont p_sen8;
    SensorCont p_sen7;
    SensorCont p_sen6;
    SensorCont p_sen5;
    SensorCont p_sen4;
    SensorCont p_sen3;
    SensorCont p_sen2;
    SensorCont p_sen1;
    SensorCont p_senO2;
    SensorCont p_flow;
    ValveMCont p_valve1;
    SensorExCont p_sen9;
    touchgfx::Image i_man;
    touchgfx::Image i_err;
    touchgfx::TextAreaWithOneWildcard t_apower;

    /*
     * Wildcard Buffers
     */
    static const uint16_t T_TIMECLOCK_SIZE = 10;
    touchgfx::Unicode::UnicodeChar t_timeClockBuffer[T_TIMECLOCK_SIZE];
    static const uint16_t T_DATECLOCK_SIZE = 12;
    touchgfx::Unicode::UnicodeChar t_dateClockBuffer[T_DATECLOCK_SIZE];
    static const uint16_t T_DEBUG_SIZE = 16;
    touchgfx::Unicode::UnicodeChar t_debugBuffer[T_DEBUG_SIZE];
    static const uint16_t T_PFLAP_SIZE = 6;
    touchgfx::Unicode::UnicodeChar t_pflapBuffer[T_PFLAP_SIZE];
    static const uint16_t T_SFLAP_SIZE = 6;
    touchgfx::Unicode::UnicodeChar t_sflapBuffer[T_SFLAP_SIZE];
    static const uint16_t T_ACCLEVEL_SIZE = 5;
    touchgfx::Unicode::UnicodeChar t_accLevelBuffer[T_ACCLEVEL_SIZE];
    static const uint16_t T_ACCENG_SIZE = 16;
    touchgfx::Unicode::UnicodeChar t_accEngBuffer[T_ACCENG_SIZE];
    static const uint16_t T_RTF_SIZE = 5;
    touchgfx::Unicode::UnicodeChar t_rTFBuffer[T_RTF_SIZE];
    static const uint16_t T_APOWER_SIZE = 10;
    touchgfx::Unicode::UnicodeChar t_apowerBuffer[T_APOWER_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<mainScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<mainScreenViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;
    touchgfx::Callback<mainScreenViewBase, const touchgfx::Slider&, int> sliderValueConfirmedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);
    void sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // MAINSCREENVIEWBASE_HPP
